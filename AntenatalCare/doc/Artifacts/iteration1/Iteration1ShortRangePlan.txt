Iteration 1 Plan

Use case: 
* CHO conducts first antenatal exam for patient and records information into the register.

1.  CHO opens Consulting Register and records preliminary information.	
2.  Once complete the CHO opens the Antenatal Care Register.
3.  Items up through and including Age are pulled and populated from the Consulting Register.
(Need to figure out how to make this happen)
4.  CHO conducts exam and records data points above. (We will need to figure out how to save
progress in case power is lost).
5.  CHO submits information.
6.  System alerts CHO if items are missing.
7.  CHO adds the missing information.
8.  System alerts CHO that the register is complete and saved to storage. 


Tasks:
* Create a GUI with the required fields and checkboxes (est. 8 hours, act. 6.5 hours)
     - create a tab for new visit (est. 1 hour, act. 30 mins)
     - add labels for the items to be populated from the consulting register (est. 2 hours, act. 2 hours)
     - add labels and text or check boxes for the unique antenatal exam items (est. 5 hours, act. 4 hours)
     - create submit button that validates completeness and sends information to be stored (Validation moved
       to second iteration)
* Controller class work (est. 8 hours, act. 5 hours)
     - collect information from the GUI (est. 4 hours, act. 3 hours)
     - use collected information to create a new visit instance
     - send the visit instance to persistent storage
     - if time allows, populate GUI with prior visit information
* Build stub person object (est. 2 hours, act. 1 hour)
     - create with already set fields
     - blank constructor
     - get and set methods
* Create exam storage class (est 2 hours; act 2 hours)
     - fields (We'll need one that references the Person object from the Consulting Register
     - constructors
     - methods: getters and setters
* DAO/Storage (est. 3 hours, act. 2 hours)
     - generate a DAO for storing the exam class
     - generate a DAO for storing the DummyPerson class
* Documentation (est. 2 hours, act. 1.5 hours)
     - create basic JDoc comments